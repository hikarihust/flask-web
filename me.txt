                                Project 1: Micro Blog(design+site)
                
Coding the page structure with HTML
Include images in our HTML site
Finishing the header and navigation
HTML forms: sending data
Creating the footer with multiple columns
Style the header and menu bar
Style HTML forms and inputs
Style the micro blog entries
Style the page footer
        
        ==================================================================================
                                Backend Development with Flask
    
"Hello, world" with Flask
    pip3 freeze
        check list libraries installed 
    pip3 install virtualenv 
        Use to install virtual environment 
    virtualenv is a tool to create virtual environment
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask
    set FLASK_APP=app.py
    set FLASK_ENV=development
    flask run 
    Open Browser to check: 
        http://127.0.0.1:5000
        http://127.0.0.1:5000/fancy
Using render_template to send longer HTML strings
    Open Browser
    http://127.0.0.1:5000
    http://127.0.0.1:5000/second
What is Jinja2?
    template=Template("Hello, {{name}}")
    return template.render(name="John")
    Open Browser:
        http://127.0.0.1:5000/template
        http://127.0.0.1:5000/jinja
Jinja2 Expressions
    Open Browser:
    http://127.0.0.1:5000/expressions
Working with data structures in Jinja2
    http://127.0.0.1:5000/data-structures
Conditional statements in Jinja2
    http://127.0.0.1:5000/conditionals-basics
Using loops in Jinja2
    http://127.0.0.1:5000/for-loop
    http://127.0.0.1:5000/for-loop/conditionals
Setting up our Microblog project with Flask
    http://127.0.0.1:5000
Receiving form data using Flask
Displaying past entries in the Microblog project
Formatting dates correctly in our entries
Accessing MongoDB with Compass and Atlas
    Create New Cluster
    Cloud Provider & Region
        AWS, Singapore 
    Cluster Tier M0 Sandbox (Shared RAM, 512 MB Storage)
    Cluster Name: Microblog-Application
    NetWork Access: 0.0.0.0/0  (includes your current IP address)
    Database Access -> Add New Database User
        username: quang 
        pwd: 123456@
    Cluster - Connect 
        Connect using MongoDB Compass and download: mongodb-compass-1.25.0-win32-x64.exe
        mongodb+srv://quang:<password>@microblog-application.jhlkz.mongodb.net/test
    CREATE DATABASE
        Database Name: microblog
        Collection Name: entries
    microblog->entries->ADD DATA->Insert Document(How to add data)
        {
            "db": "MongoDB",
            "type": "NoSQL",
            "dbName": "microblog",
            "collectionName": "entries"
        } 
Storing Microblog entries in MongoDB
    pip3 install pymongo[srv]
Retrieving the Microblog entries from MongoDB
How to use Flask's app factory pattern

        ==================================================================================
                                Deploying Flask Apps to Heroku
    
What is the requirements.txt file?
    Dependencies our app
    .\venv\Scripts\activate
    pymongo
Getting our app ready for Heroku
Deploying our app to Heroku
    Create App: microblog-flask-web
    heroku login
    git init
    heroku git:remote -a microblog-flask-web
    git add .
    git commit -am "deploy to heroku"
    git push heroku master
    Open:  https://microblog-flask-web.herokuapp.com
Hiding the MongoDB connection details from our code
    pip3 install python-dotenv
    .env file
    .gitignore file to ignore .env
    git init
    heroku git:remote -a microblog-flask-web
    git add .
    git commit -am "Hiding the MongoDB connection details"
    git push -f heroku master
    Set environment variable
        Heroku -> Settings -> Reveal Config Vars
    
        ==================================================================================
                                A simple terminal Blog

Installing MongoDB
    https://www.mongodb.com/try/download/community
Introduction to MongoDB
    C:\Program Files\MongoDB\Server\4.4\bin>
    mongo to start MongoDB
    show dbs 
        show Database list 
    use fullstack 
    show collections
    db.students.insert({"name": "Jose", "mark": 99})
    db.students.find({})
    db.students.insert({"item": "Chair", "price": 999, "age":25})
    db.students.remove({"item": "Chair"})
Creating a project that uses MongoDB and pymongo
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install pymongo
    pip3 freeze
    py .\app.py
Simplifying lists in Python with list comprehension
    students = [student for student in collection.find({})]
Introduction to Object-Oriented Programming
Creating our first class, the Post
Creating a Database class for database interactions
The last few Post methods
Having default parameter values in Python methods
    self.id = uuid.uuid4().hex if id is None else id
Understanding dates in Python: the datetime module
    date=datetime.datetime.utcnow()
Verifying that the Post methods all work
    post = Post(blog_id="123",
                title="Another great post",
                content="This is some sample content",
                author="jose"
                )

    post.from_mongo('965ae76cb1364f60a62904ca48ea106f')
    print(post.json())
    post.save_to_mongo()
    Then 
        post.from_mongo('965ae76cb1364f60a62904ca48ea106f')
        print(post.json())
    Or
    Console: db.posts.find({}) to check post is inserted
The Blog class and @classmethods
Verifying the Blog methods all work
    from models.blog import Blog
    blog=Blog(
            author="Jose",
            title="Sample title",
            description="Sample description"
        )

    blog.new_post()
    blog.save_to_mongo()
    from_database=Blog.from_mongo(blog.id)
    print(blog.get_posts())
The menu and user interactions
Finally, running the application
    from menu import Menu
    menu = Menu()
    menu.run_menu()

        ==================================================================================
                                Our first web application

How can we make our own API?What is Flask?
    flask-web\web_blog
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask
    in src folder
        py .\app.py
Python cls() and argument unpacking
    pip3 install pymongo
Creating the User model for our application
Starting developing the User model
Creating the login and register
Finding blogs by a specific author
    db.blogs.find({})
Allowing creation of blogs and posts
Creating the static resources and templates
Our first template in Jinja2
Beginning CSS styling of pages
