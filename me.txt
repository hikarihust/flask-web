                                Project 1: Micro Blog(design+site)
                
Coding the page structure with HTML
Include images in our HTML site
Finishing the header and navigation
HTML forms: sending data
Creating the footer with multiple columns
Style the header and menu bar
Style HTML forms and inputs
Style the micro blog entries
Style the page footer
        
        ==================================================================================
                                Backend Development with Flask
    
"Hello, world" with Flask
    pip3 freeze
        check list libraries installed 
    pip3 install virtualenv 
        Use to install virtual environment 
    virtualenv is a tool to create virtual environment
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask
    set FLASK_APP=app.py
    set FLASK_ENV=development
    flask run 
    Open Browser to check: 
        http://127.0.0.1:5000
        http://127.0.0.1:5000/fancy
Using render_template to send longer HTML strings
    Open Browser
    http://127.0.0.1:5000
    http://127.0.0.1:5000/second
What is Jinja2?
    template=Template("Hello, {{name}}")
    return template.render(name="John")
    Open Browser:
        http://127.0.0.1:5000/template
        http://127.0.0.1:5000/jinja
Jinja2 Expressions
    Open Browser:
    http://127.0.0.1:5000/expressions
Working with data structures in Jinja2
    http://127.0.0.1:5000/data-structures
Conditional statements in Jinja2
    http://127.0.0.1:5000/conditionals-basics
Using loops in Jinja2
    http://127.0.0.1:5000/for-loop
    http://127.0.0.1:5000/for-loop/conditionals
Setting up our Microblog project with Flask
    http://127.0.0.1:5000
Receiving form data using Flask
Displaying past entries in the Microblog project
Formatting dates correctly in our entries
Accessing MongoDB with Compass and Atlas
    Create New Cluster
    Cloud Provider & Region
        AWS, Singapore 
    Cluster Tier M0 Sandbox (Shared RAM, 512 MB Storage)
    Cluster Name: Microblog-Application
    NetWork Access: 0.0.0.0/0  (includes your current IP address)
    Database Access -> Add New Database User
        username: quang 
        pwd: 123456@
    Cluster - Connect 
        Connect using MongoDB Compass and download: mongodb-compass-1.25.0-win32-x64.exe
        mongodb+srv://quang:<password>@microblog-application.jhlkz.mongodb.net/test
    CREATE DATABASE
        Database Name: microblog
        Collection Name: entries
    microblog->entries->ADD DATA->Insert Document(How to add data)
        {
            "db": "MongoDB",
            "type": "NoSQL",
            "dbName": "microblog",
            "collectionName": "entries"
        } 
Storing Microblog entries in MongoDB
    pip3 install pymongo[srv]
Retrieving the Microblog entries from MongoDB
How to use Flask's app factory pattern

        ==================================================================================
                                Deploying Flask Apps to Heroku
    
What is the requirements.txt file?
    Dependencies our app
    .\venv\Scripts\activate
    pymongo
Getting our app ready for Heroku
Deploying our app to Heroku
    Create App: microblog-flask-web
    heroku login
    git init
    heroku git:remote -a microblog-flask-web
    git add .
    git commit -am "deploy to heroku"
    git push heroku master
    Open:  https://microblog-flask-web.herokuapp.com
Hiding the MongoDB connection details from our code
    pip3 install python-dotenv
    .env file
    .gitignore file to ignore .env
    git init
    heroku git:remote -a microblog-flask-web
    git add .
    git commit -am "Hiding the MongoDB connection details"
    git push -f heroku master
    Set environment variable
        Heroku -> Settings -> Reveal Config Vars
    
        ==================================================================================
                                A simple terminal Blog

Installing MongoDB
    https://www.mongodb.com/try/download/community
Introduction to MongoDB
    C:\Program Files\MongoDB\Server\4.4\bin>
    mongo to start MongoDB
    show dbs 
        show Database list 
    use fullstack 
    show collections
    db.students.insert({"name": "Jose", "mark": 99})
    db.students.find({})
    db.students.insert({"item": "Chair", "price": 999, "age":25})
    db.students.remove({"item": "Chair"})
Creating a project that uses MongoDB and pymongo
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install pymongo
    pip3 freeze
    py .\app.py
Simplifying lists in Python with list comprehension
    students = [student for student in collection.find({})]
Introduction to Object-Oriented Programming
Creating our first class, the Post
Creating a Database class for database interactions
The last few Post methods
Having default parameter values in Python methods
    self.id = uuid.uuid4().hex if id is None else id
Understanding dates in Python: the datetime module
    date=datetime.datetime.utcnow()
Verifying that the Post methods all work
    post = Post(blog_id="123",
                title="Another great post",
                content="This is some sample content",
                author="jose"
                )

    post.from_mongo('965ae76cb1364f60a62904ca48ea106f')
    print(post.json())
    post.save_to_mongo()
    Then 
        post.from_mongo('965ae76cb1364f60a62904ca48ea106f')
        print(post.json())
    Or
    Console: db.posts.find({}) to check post is inserted
The Blog class and @classmethods
Verifying the Blog methods all work
    from models.blog import Blog
    blog=Blog(
            author="Jose",
            title="Sample title",
            description="Sample description"
        )

    blog.new_post()
    blog.save_to_mongo()
    from_database=Blog.from_mongo(blog.id)
    print(blog.get_posts())
The menu and user interactions
Finally, running the application
    from menu import Menu
    menu = Menu()
    menu.run_menu()

        ==================================================================================
                                Our first web application

How can we make our own API?What is Flask?
    flask-web\web_blog
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask
    in src folder
        py .\app.py
Python cls() and argument unpacking
    pip3 install pymongo
Creating the User model for our application
Starting developing the User model
Creating the login and register
Finding blogs by a specific author
    db.blogs.find({})
Allowing creation of blogs and posts
Creating the static resources and templates
Our first template in Jinja2
Beginning CSS styling of pages
The user login page
    db.users.insert({"email": "test@test.com", "password": "password"})
    db.users.insert({"email": "test1@test.com", "password": "password"})
    db.users.find({})
    Chrome: http://127.0.0.1:4995/login to check test@test.com
    Firefox: http://127.0.0.1:4995/login to check test1@test.com
The user registration page
    http://127.0.0.1:4995/register to register quang@gmail.com 
    http://127.0.0.1:4995/login to login registered quang@gmail.com 
Using Bootstrap for the first time for great styling
Display a list of blogs
    db.blogs.insert({ "_id" : "6035d9a73303bd449b6eea57", "author" : "Quang", "title" : "Sample title", "description" : "Sample description", "author_id" : "8767e904d56e40d7a7aa23176f32ed53" })
    http://127.0.0.1:4995/blogs
    http://127.0.0.1:4995/blogs/8767e904d56e40d7a7aa23176f32ed53
Displaying a list of posts
    db.posts.remove({})
    db.posts.insert({"_id": "6035b485059456412cc2ba7a", "blog_id": "6035d9a73303bd449b6eea57", "title": "Sample post title", "content": "Lorem ipsum", "created_date": ISODate("2020-03-10T00:00:00Z"), "author": "Quang"})
    http://127.0.0.1:4995/posts/6035d9a73303bd449b6eea57
        check having post
    db.blogs.insert({ "_id" : "6035d9a73303bd449b6eea58", "author" : "Quang", "title" : "Sample title2", "description" : "Sample description2", "author_id" : "8767e904d56e40d7a7aa23176f32ed53" })
    http://127.0.0.1:4995/posts/6035d9a73303bd449b6eea58
        check do not have post
Creating new blogs (front-end)
    http://127.0.0.1:4995/blogs/new
Finalising the application by allowing to create posts!
    http://127.0.0.1:4995/posts/8a9ecbc752e546afad81ffeb8752b3de

        ==================================================================================
                                Price alerts for online web-stores

What are Flask Blueprints?
    flask-web\web-stores
    virtualenv venv --python=python3
    source venv/bin/activate
    Windows: .\venv\Scripts\activate
    pip3 install Flask
    py .\app.py
    http://127.0.0.1:5000/learning/rolf to check
Creating our new app structure
Getting page content with requests
    pip3 install beautifulsoup4
    pip3 install requests
    import requests
    response = requests.get("https://www.johnlewis.com/ruark-mrx-bluetooth-wi-fi-connected-wireless-speaker/soft-grey/p3645548")
    print(response.content)
Getting an element's content with BeautifulSoup
Using RegEx to get specific information from a string
    https://stackoverflow.com/questions/2081640/what-exactly-do-u-and-r-string-flags-do-and-what-are-raw-string-literals/2081708#2081708
Creating our Item model
Adding type hinting to our application so far
    def __init__(self, url: str, tag_name: str, query: Dict)
    load_price(self) -> float
Preparing our Item model for saving in MongoDB
Inserting Items into MongoDB
    pip3 install pymongo
    use pricing 
    db.items.find({}).pretty()
Retrieving Items from MongoDB
Notifying users in a simple way when the price is reached
    py .\app.py
    py .\app.py
What is an abstract class in Python?
Making more methods generic
Finishing up the Model superclass
How to force a subclass to have properties of a parent class
    In Model class
        collection: str
        _id: str
Type hinting the current object type in a method return
Creating items through the web interface
    Backup app.py
    from models.item import Item
    from models.alert import Alert


    ipad = Item(
        "https://www.johnlewis.com/2020-apple-ipad-pro-11-inch-a12z-bionic-ios-wi-fi-1tb/space-grey/p4949061",
        "p",
        {"class": "price price--large"}
    )

    ipad.save_to_mongo()

    alert = Alert(ipad._id, 2000)
    alert.save_to_mongo()

    db.items.find({}).pretty()
    to check inserted data
Styling our site using Bootstrap 4
Creating the Items blueprint
Creating a page to show all items
Creating alerts through the web interface
    http://127.0.0.1:5000/alerts/
    http://127.0.0.1:5000/items/
    http://127.0.0.1:5000/items/new
    http://127.0.0.1:5000/alerts/new

        ==================================================================================

                            Developing a complete front-end with Bootstrap 4

Introducing stores to our application
    Union[str, Dict]
    Có thể là str or Dict
Getting rid of items
Testing app with stores
    use pricing
    db.items.remove({})
    db.alerts.remove({})
    db.stores.remove({})
    db.stores.insert({"_id": "123", "name": "John Lewis", "url_prefix": "https://www.johnlewis.com/", "tag_name": "p", "query": {"class": "price price--large"}})
    http://127.0.0.1:5000/alerts/new
        Item URL: https://www.johnlewis.com/2020-apple-ipad-pro-11-inch-a12z-bionic-ios-wi-fi-1tb/space-grey/p4949061
    py .\alert_updater.py
Dataclasses in Python 3.7
    import uuid
    from typing import Dict
    from dataclasses import dataclass, field

    def generate_hex():
        return uuid.uui4().hex

    @dataclass
    class User:
        _id: str = field(default_factory=generate_hex)  # field(default_factory=lambda: uuid.uuid4().hex)
        username: str
        password: str = field(repr=False, compare=False)
        country: str = field(default="United Kingdom")

        def json(self) -> Dict:
            return {
                "_id": self._id,
                "username": self.username
            }
    -------------------------------------------
    from user import User

    u = User('123', 'bob', 'password')

    print(u)
Turning our models into dataclasses
Giving names to alerts in our application
Saving the last item price
Creating stores through the web interface
Editing alert properties
Linking the alert index to the edit page
    py .\app.py 
    db.items.remove({})
    db.alerts.remove({})
    db.stores.remove({})
    http://127.0.0.1:5000/stores/
        Name: John Lewis
        URL Prefix: https://www.johnlewis.com
        tag_name: p
        query: {"class": "price price--large"}
    http://127.0.0.1:5000/alerts/new
        Name: iPad
        Item URL: https://www.johnlewis.com/2020-apple-ipad-pro-11-inch-a12z-bionic-ios-wi-fi-1tb/space-grey/p4949061
        Price limit: 5000
Editing stores
Deleting alerts
Deleting stores
Registering users
    After register a user...
    1. We send the Browser a unique piece of data
    2. The Browser stores it
    3. Every time the Browser Access our pages, it sends us that same unique data
    4. We know it's the same Browser because nobody else has Access to that unique piece of data
    import models.user.errors as UserErrors
    models/user package
        __init__.py
            from models.user.user import User
            import models.user.errors as UserErrors
    views
        users.py
            from models.user import User, UserErrors
    py .\app.py
    http://127.0.0.1:5000/users/register
        register: jose@gmail.com and pwd is 123456
    db.users.find({})
Encrypting passwords in Python with passlib
    pip3 install passlib
    db.users.remove({})
    py .\app.py
    http://127.0.0.1:5000/users/register to register
    db.users.find({}) to check password hashed 
Logging in
    http://127.0.0.1:5000/users/login
Viewing only your own alerts
    py .\app.py 
    db.items.remove({})
    db.alerts.remove({})
    db.stores.remove({})
    http://127.0.0.1:5000/stores/
        Name: John Lewis
        URL Prefix: https://www.johnlewis.com/
        tag_name: p
        query: {"class": "price price--large"}
    http://127.0.0.1:5000/alerts/new
        Name: iPad
        Item URL: https://www.johnlewis.com/2020-apple-ipad-pro-11-inch-a12z-bionic-ios-wi-fi-1tb/space-grey/p4949061
        Price limit: 5000
Limiting some pages only to logged in users
Adding a navigation bar using Bootstrap
Limiting actions to admins only
    pip3 install python-dotenv
    http://127.0.0.1:5000/users/register
        register: jose@gmail.com and pwd is 123456
        register: rolf@gmail.com and pwd is 123456
    http://127.0.0.1:5000/stores/ as jose and rolf to check
Logging out
Signing up with Mailgun
    https://www.mailgun.com/
Sending e-mail with Mailgun
    py app.py
    ~dev.gmail.com
    http://127.0.0.1:5000/alerts/new
        Name: iPad
        Item URL: https://www.johnlewis.com/2020-apple-ipad-pro-11-inch-a12z-bionic-ios-wi-fi-1tb/space-grey/p4949061
        Price limit: 3000
    py alert_updater.py 
Creating the landing page
